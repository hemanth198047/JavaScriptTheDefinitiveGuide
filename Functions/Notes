A function is a block of code that is defined once but may be executed or invoked any number of times. 
Javascrpt functions are parameterized -- a function definition may include a list of identifiers, known as parameters that acts as local variables for the body of the function.
Function invocations provides values or arguments for the function's parameters.
Functions often use the values of their arguments to compute the return value that becomes the value of the function invocation expressions. 
In addition to arguments, each invocation has another value -- Invocation Context -- That is the value of this keyword.

If a function is assigned to a property of an object, then that function is called method of that object. 
If a function is invoked on or through an object, that object becomes the invocation context or this of that function
Functions designed to initialize a newly created object are called Constructors.

In Javascript, functions are objects and they can be manipulated by programs and they are treated as simple variables. Since they are treated as simple variables, they can be passed
as arguments to another functions. Since Functions are objects, you can set properties on them and then invoke methods on them as well.

functions can be nested within another functions and they have access to variables that are in scope where the functions are defined. this means, javascript functions are closures.

Defining Functions
==================
Functions are defined using the function keyword, which can be used in function definition expression or in function declaration statement. in both the cases, function definition
starts with function keyword followed by these components
1. an identifier that names the function. the name part is required in function declaration statement where the function object is created and assigned to the variable with the name same
   as defined as function name. For function definition expression, name is optional and if present, will be used only inside the function body
2. A pair of paranthesis around zero or more identifiers called parameters. These parameters acts as local variables inside the body of the function
3. A pair of curly braces with zero or more java script statements inside it. These statements are body of the function and are executed whenever the function is invoked.

a function defined as an expression can be used only in the context of other larger expressions. examples are in app.js.

Note that function names are optional while defining a function definition expression. a function declaration statement actually defines a function object and then assign that object to a
variable where as in function definition expression, it is not assigned to any variable but is used directly. 

Normally a function definition expression does not include any name. But in case if there is one name given to function definition expression, then, the local function scope for that function
will include the binding of the function name to that function object. In effect, the function name becomes the local variable within that function body. 

Any legal javascript identifier can be a function name. 

One important point to note is that all the function declaration statements are hoisted to the top of the enclosing script or the enclosing function so that functions declared in this way
can be invoked even before they are defined. But this is not true for function definition expressions. However, the variable declarations alone are hoisted but not their assignments. Hence,
if a function declared, we can't just invoke it until it is assigned with some value.

A function return statement causes the function to stop executing and return the value of its expression to the caller. if the return statement does not have an associated expression, it
returns undefined value. 

Functions with no return values are sometimes called as procedures.

Nested Functions
================
In javascript, functions can be nested within other functions.
example:
  function hypotenuse(a, b) {
    function square(x) {
        return x*x;
    }
    return Math.sqrt(square(a0 + square(b)));
  }

  The interesting thing about nested function is their variable scoping rules. they can access the variables and parameters of the function they are nested within.
  in the code above, the function square can access the parameters a and b.

  In Javascript, function declaration statements are not true statements and ECMAScript specification allows them only as top level statements. this means function declaration statements
  can appear in global code, within other functions but they can't appear inside of loops, conditionals, or try/catch/finally or with statements. This restriction only applies when functions
  are defined as statements only. Function definition expressions can appear anywhere inside the javascript.

Invoking Functions
==================
the javascript code that forms a function body will not be executed when it is defined but will be executed when the function is invoked. javascript functions can be invoked in 4 ways
1. As functions
2. As Methods
3. As Constructors
4. As indirectly through call and apply methods

Function Invocation
===================
Functions are invoked as functions or methods with an invocation expression.
An invocation expression consists of a function expression which is evaluated to a function object, followed by a open paranthesis and zero or more expressions evalauted to parameters and
followed by a closing paranthesis. if the function expression is a property access expression, which means, if the function is a property value of an object or an element in an array
then it is called method invocation expression. 

In an invocation, each argument expression is evaluated and the resulting value becomes the arguments to the function. these values are assigned to the parameter names defined in function.
inside function body, a reference to parameter names evaluates to the corresponding argument value.

for regular functions, the return value becomes value of the function invocation expression. if the function reaches to end after executing all statements inside the function, then, return
value becomes undefined.

for function invocation in ECMAScript 3 and non-strict ECMAScript 5, the invocation context (the this) is the global object. However, in strict mode it is undefined.

Functions written to be invoked as functions do not typically use the this keyword at all. this fact can be used to identify whether we are using strict mode or not. refer app.js for reference.

Method Invocation
=================
A method is nothing but a function that is stored as a value for a property in an object. If you have a function f and an object o, you can define a method named m of o with the following line
o.m = f;

Having defined a method m() of the object o, invoke it like this
o.m();

if the method expects any arguments, you can pass the arguments to o.m() as well.

the code above is an invocation expression which has a function expression and 2 arguments for it. here the function expression itself is a property access expression and this means that
the function is invoked as a method rather than a regular function.

method invocation expressions acts exactly same as regular expressions. Only difference is that, in method invocation, the object on which the method is invoked becomes the invocation context
of the function where that object is referred to with "this" inside the method invocation.

example:
   var calculator = {
    operand1:1,
    operand2:1,
    add: function() {
        this.result = this.operand1 + this.operand2;
    }
   };

   calculator.add();
   calculator.result;

   most method invocations use dot notation to access the property, but property access expressions that use square brackets also cause method invocation.
   ex: o.m(x, y) can also be written as o["m"](x,y)

   method invocations may also involve more complex property access expressions.
   ex: customer.surname.toUppercase(); f().m();

   methods and this keyword are central to object oriented programming. Any function that is used as a method is implicitly passed an argument -- the object through which it is invoked.
   typically, a method performs some sort of operation on that object, and the method invocation expression syntax is an elegant way to express the fact that a function is operating on
   an object. compare the following 2 lines
   
   rect.setSize(width, height);
   setRectSize(rect, width, height);

   

